user nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" "$request_uri" "$uri"'
                      '"$http_user_agent" "$http_x_forwarded_for"';    
    access_log  /var/log/nginx/access.log  main;
    sendfile on;
    keepalive_timeout 65;

    upstream frontend-web {
        server frontend:80;
    }
    
    upstream fastapi {
        server backend:8000;
    }

    #HTTP -> HTTPS 리디렉션
    server {
        listen 80;
        server_name public-insight.co.kr www.public-insight.co.kr;

        location ~ /.well-known/acme-challenge {
                allow all;
                root /usr/share/nginx/html;
                try_files $uri =404;
        }

        location / {
                return 301 https://$host$request_uri;
        }    
    }
    server {
        listen 443 ssl;
        server_name public-insight.co.kr www.public-insight.co.kr;
        
        ssl_certificate /etc/letsencrypt/live/public-insight.co.kr/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/public-insight.co.kr/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf; # 보안 강화를 위한 옵션 추가
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;   # 보안 강화를 위한 옵션 추가

        location / {
            proxy_pass         http://frontend-web;       # docker-web 컨테이너로 포워딩
            proxy_redirect     off;                     # 서버 응답 헤더의 주소 변경 (불필요)
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
	        proxy_set_header   X-Forwarded-Proto $scheme;
        }

           # /api/로 시작하는 요청을 백엔드 FastAPI로 전달
        location /api/ {
            rewrite ^/api(/.*)$ $1 break;
            proxy_pass         http://fastapi;  # FastAPI 서버로 전달
            proxy_redirect     off;
            proxy_set_header   Host $host;
            proxy_set_header   X-Real-IP $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Host $server_name;
            proxy_set_header   X-Forwarded-Proto $scheme;
        }
    }
}
